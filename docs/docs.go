// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Melakukan autentikasi pengguna dengan email dan password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login pengguna",
                "parameters": [
                    {
                        "description": "body Login",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login berhasil",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Email atau password kosong, atau email/password salah",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "Email tidak ditemukan atau email/password salah",
                        "schema": {
                            "$ref": "#/definitions/models.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Kesalahan internal server",
                        "schema": {
                            "$ref": "#/definitions/models.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "delete": {
                "security": [
                    {
                        "JWTtoken": []
                    }
                ],
                "description": "Mem-blacklist JWT Token yang aktif untuk mengakhiri sesi.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout pengguna",
                "responses": {
                    "200": {
                        "description": "Logout berhasil",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "500": {
                        "description": "Kesalahan server internal saat mem-blacklist token",
                        "schema": {
                            "$ref": "#/definitions/models.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Mendaftarkan pengguna baru dengan email dan password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Pendaftaran pengguna baru",
                "parameters": [
                    {
                        "description": "Data Pendaftaran Pengguna (Email dan Password)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pendaftaran berhasil",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Validasi input gagal (misalnya: email tidak valid, password terlalu pendek, atau email sudah terdaftar)",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Kesalahan server internal",
                        "schema": {
                            "$ref": "#/definitions/models.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/{any}": {
            "get": {
                "description": "if route not found, send 404 statusNotfound as response",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NoRoute"
                ],
                "summary": "testing display for no route",
                "responses": {
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.NotFoundResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AuthRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.BadRequestResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "error": {
                    "type": "string",
                    "example": "Example bad request error..."
                },
                "is_success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "models.InternalErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "error": {
                    "type": "string",
                    "example": "Example Internal server error..."
                },
                "is_success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "is_success": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "Example message success..."
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "token": {
                    "type": "string",
                    "example": "example : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "models.NotFoundResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 404
                },
                "error": {
                    "type": "string",
                    "example": "example, Not Found"
                },
                "is_success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "models.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "is_success": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "Example message success..."
                },
                "page": {
                    "type": "integer",
                    "example": 1
                }
            }
        }
    },
    "securityDefinitions": {
        "JWTtoken": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "127.0.0.1:3000",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "communicare",
	Description:      "communicare your social app",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
